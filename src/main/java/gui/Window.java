/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Dimension;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.image.BufferedImage;
import java.beans.PropertyVetoException;
import javax.swing.JOptionPane;
import org.opencv.core.Mat;
import org.opencv.highgui.HighGui;

/**
 *
 * @author Alexander √Ålvarez Marques
 */
public class Window extends javax.swing.JInternalFrame {

    private Mat mat = null;
    
    /**
     * Creates new form Window
     */
    public Window() {
        initComponents();
        
        // Frame resize event
        this.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent evt) {
                resizeImage();
            }
        });
        
        this.setPreferredSize(new Dimension(100, 100));
        this.setMaximizable(true);
        this.setIconifiable(true);
        this.setClosable(true);
        this.setResizable(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundImage = new beans.BackgroundImage();

        javax.swing.GroupLayout backgroundImageLayout = new javax.swing.GroupLayout(backgroundImage);
        backgroundImage.setLayout(backgroundImageLayout);
        backgroundImageLayout.setHorizontalGroup(
            backgroundImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 394, Short.MAX_VALUE)
        );
        backgroundImageLayout.setVerticalGroup(
            backgroundImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 274, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void setTitle(String title) {
        super.setTitle(title);
    }
    
    @Override
    public String getTitle() {
        return super.getTitle();
    }
    
    private void resizeImage() {
        if (mat != null) {

            int w = backgroundImage.getWidth();
            int h = backgroundImage.getHeight();

            if (w == 0) {
                w = 400;
                h = 300;
            }
            
            BufferedImage img = (BufferedImage) HighGui.toBufferedImage(mat);

            backgroundImage.setImage(img);
            backgroundImage.setMat(mat);
            backgroundImage.paintImage(w, h);
        }
    }
    
    public void configure(Mat mat) {
        this.mat = mat;
        resizeImage();
    }
    
    public Mat getMat() {
        return mat;
    }
    
    public Window applyFilter(String title) {
        
        if (isUmbralized()) {
            JOptionPane.showMessageDialog(null, "Can not apply filter to this image.", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        
        int opt = -1;
        
        while (true) {
            String option = JOptionPane.showInputDialog(null, "Enter a filter value", "Filter value", JOptionPane.INFORMATION_MESSAGE);

            if (option == null) {
                break;
            }

            opt = Integer.parseInt(option);
            if (opt < 0 || opt > 255) {
                JOptionPane.showMessageDialog(null, "Input value not valid.\nPlease try again.");
            } else {
                break;
            }
        }
        
        if (opt != -1) {
            Window n = new Window();
            n.setTitle(title + " (" + opt + ")");
            n.configure(backgroundImage.applyFilter(mat, opt));
            n.setVisible(true);
            
            return n;
        }
        
        return null;
    }
    
    public void setIcon() {
        
        try {
            this.setIcon(true);
        } catch(PropertyVetoException e) {
            
        }
    }
    
    public void setMaximized() {
        
        try {
            this.setMaximum(true);
        } catch(PropertyVetoException e) {
            
        }
    }
    
    private boolean isUmbralized() {
        return backgroundImage.isUmbralized(mat);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private beans.BackgroundImage backgroundImage;
    // End of variables declaration//GEN-END:variables
}
