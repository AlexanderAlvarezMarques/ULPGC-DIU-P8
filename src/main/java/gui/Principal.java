package gui;

import java.io.File;
import javax.swing.filechooser.FileFilter;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.imgcodecs.Imgcodecs;

/**
 * @author Alexander Álvarez Marques
 * @date 2020-09-10
 * @version 0.1
 */
public class Principal extends javax.swing.JFrame {

    // Variables
    JFileChooser fileChooser = new JFileChooser();
    Mat mat = null;

    /**
     * Creates new form Principal
     */
    public Principal() {

        // OpenCV
        nu.pattern.OpenCV.loadShared();
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);

        initComponents();
        super.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonBottonPanel = new javax.swing.JPanel();
        applyFilterButton = new javax.swing.JButton();
        authorsPanel = new javax.swing.JPanel();
        copyright = new javax.swing.JLabel();
        authors = new javax.swing.JLabel();
        desktopPane = new javax.swing.JDesktopPane();
        menu = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        newFile = new javax.swing.JMenuItem();
        fileOpen = new javax.swing.JMenuItem();
        saveFile = new javax.swing.JMenuItem();
        exitProgram = new javax.swing.JMenuItem();
        windows = new javax.swing.JMenu();
        closeWindows = new javax.swing.JMenuItem();
        minimizeWindows = new javax.swing.JMenuItem();
        maximizeWindow = new javax.swing.JMenuItem();
        help = new javax.swing.JMenu();
        about = new javax.swing.JMenuItem();
        documentation = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonBottonPanel.setVisible(false);

        applyFilterButton.setText("Apply filter");
        applyFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyFilterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonBottonPanelLayout = new javax.swing.GroupLayout(buttonBottonPanel);
        buttonBottonPanel.setLayout(buttonBottonPanelLayout);
        buttonBottonPanelLayout.setHorizontalGroup(
            buttonBottonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonBottonPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(applyFilterButton))
        );
        buttonBottonPanelLayout.setVerticalGroup(
            buttonBottonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonBottonPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(applyFilterButton))
        );

        copyright.setText("Copyright:");

        authors.setFont(new java.awt.Font("DejaVu Sans", 2, 12)); // NOI18N
        authors.setForeground(new java.awt.Color(0, 0, 0));
        authors.setText("Alexander Álvarez Marques");

        javax.swing.GroupLayout authorsPanelLayout = new javax.swing.GroupLayout(authorsPanel);
        authorsPanel.setLayout(authorsPanelLayout);
        authorsPanelLayout.setHorizontalGroup(
            authorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(authorsPanelLayout.createSequentialGroup()
                .addComponent(copyright)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(authors, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE)
                .addContainerGap())
        );
        authorsPanelLayout.setVerticalGroup(
            authorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, authorsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(authorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(copyright)
                    .addComponent(authors))
                .addContainerGap())
        );

        javax.swing.GroupLayout desktopPaneLayout = new javax.swing.GroupLayout(desktopPane);
        desktopPane.setLayout(desktopPaneLayout);
        desktopPaneLayout.setHorizontalGroup(
            desktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        desktopPaneLayout.setVerticalGroup(
            desktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 416, Short.MAX_VALUE)
        );

        file.setMnemonic('f');
        file.setText("File");

        newFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        newFile.setText("New");
        newFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileActionPerformed(evt);
            }
        });
        file.add(newFile);

        fileOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        fileOpen.setText("Open");
        fileOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileOpenActionPerformed(evt);
            }
        });
        file.add(fileOpen);

        saveFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveFile.setText("Save");
        saveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileActionPerformed(evt);
            }
        });
        file.add(saveFile);

        exitProgram.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        exitProgram.setText("Exit");
        exitProgram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitProgramActionPerformed(evt);
            }
        });
        file.add(exitProgram);

        menu.add(file);

        windows.setText("Windows");

        closeWindows.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        closeWindows.setText("Close all");
        closeWindows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeWindowsActionPerformed(evt);
            }
        });
        windows.add(closeWindows);

        minimizeWindows.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        minimizeWindows.setText("Minimize all");
        minimizeWindows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minimizeWindowsActionPerformed(evt);
            }
        });
        windows.add(minimizeWindows);

        maximizeWindow.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        maximizeWindow.setText("Maximize all");
        maximizeWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maximizeWindowActionPerformed(evt);
            }
        });
        windows.add(maximizeWindow);

        menu.add(windows);

        help.setMnemonic('h');
        help.setText("Help");

        about.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        about.setMnemonic('a');
        about.setText("About");
        about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutActionPerformed(evt);
            }
        });
        help.add(about);

        documentation.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        documentation.setMnemonic('d');
        documentation.setText("Documentation");
        documentation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                documentationActionPerformed(evt);
            }
        });
        help.add(documentation);

        menu.add(help);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(buttonBottonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(authorsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(desktopPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(desktopPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonBottonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(authorsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileOpenActionPerformed

        FileFilter imageFilter
                = new FileNameExtensionFilter("Image files (BMP, JPG, JPEG, WBMP, PNG, GIF)",
                        ImageIO.getReaderFileSuffixes());
        fileChooser.setFileFilter(imageFilter);
        fileChooser.setAcceptAllFileFilterUsed(false);

        int choose = fileChooser.showOpenDialog(menu);

        if (choose == JFileChooser.APPROVE_OPTION) {

            File selectedFile = fileChooser.getSelectedFile();

            // Load image and print
            mat = Imgcodecs.imread(selectedFile.getPath());
            String title = fileChooser.getSelectedFile().getName();

            Window n = new Window();
            n.setTitle(title);
            n.configure(mat);
            n.setVisible(true);
            minimizeWindows(n);

            buttonBottonPanel.setVisible(true);
        }
    }//GEN-LAST:event_fileOpenActionPerformed

    /**
     * About information
     *
     * @param evt
     */
    private void aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutActionPerformed

        String information = ""
                + "<html>"
                + "<h1>About</h1>"
                + "<p>Date version: 2020-09-10</p>"
                + "<p>Version: 0.1</p>"
                + "<p><b>Alexander Álvarez Marques</b></p>"
                + "</html>";

        JOptionPane.showMessageDialog(this, information, "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutActionPerformed

    /**
     * Documentation information
     *
     * @param evt
     */
    private void documentationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_documentationActionPerformed

        String information = ""
                + "<html>"
                + "<h1>Guide</h1>"
                + "<h2>Description</h2>"
                + "<p style=\" text-align: justify;\">"
                + "This program apply a black and white filter to selected image.<br>"
                + "The image result is totally design on black and white colors."
                + "</p>"
                + "<h2>How it works</h2>"
                + "<ol>"
                + " <li>Select an image: click on \"File\" menu. Then select \"Open\".</li>"
                + " <li>After select an image, at botton right corner will appear a button (\"Apply filter\")."
                + " To apply the filter click on it</li>"
                + " <li></li>"
                + "</ol>"
                + ""
                + "</html>";

        JOptionPane.showMessageDialog(this, information, "Help", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_documentationActionPerformed

    private void newFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileActionPerformed
        //backgroundImageBean.clear();
        buttonBottonPanel.setVisible(false);
    }//GEN-LAST:event_newFileActionPerformed

    private void applyFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyFilterButtonActionPerformed
        Window w = (Window) desktopPane.getSelectedFrame();

        if (w != null) {
            Window n = w.applyFilter(w.getTitle());
            if (n != null) {
                minimizeWindows(n);
            }
        }

    }//GEN-LAST:event_applyFilterButtonActionPerformed

    private void minimizeWindows(Window n) {
        JInternalFrame[] frames = desktopPane.getAllFrames();
        for (JInternalFrame frame : frames) {
            Window window = (Window) frame;
            window.setIcon();
        }
        desktopPane.add(n);
    }

    private void exitProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitProgramActionPerformed
        int opt = JOptionPane.showConfirmDialog(null, "Do you want to exit application?", "Exit", JOptionPane.YES_NO_OPTION);
        if (opt == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_exitProgramActionPerformed

    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
        Window n = (Window) desktopPane.getSelectedFrame();

        if (n != null) {
            Mat img = n.getMat();

            if (img == null) {
                JOptionPane.showMessageDialog(null, "Any image to save", "Save image", JOptionPane.INFORMATION_MESSAGE);
            } else {

                int opt = fileChooser.showSaveDialog(null);

                if (opt == JFileChooser.APPROVE_OPTION) {
                    String path = fileChooser.getSelectedFile().getAbsolutePath();
                    Imgcodecs.imwrite(path, img);
                    JOptionPane.showMessageDialog(null, "Image saved", "Save image", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Image not saved", "Save image", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Not windown selected", "Save image", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_saveFileActionPerformed

    private void closeWindowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeWindowsActionPerformed
        JInternalFrame[] frames = desktopPane.getAllFrames();
        for (JInternalFrame frame : frames) {
            frame.dispose();
        }
    }//GEN-LAST:event_closeWindowsActionPerformed

    private void minimizeWindowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minimizeWindowsActionPerformed
        JInternalFrame[] frames = desktopPane.getAllFrames();
        for (JInternalFrame frame : frames) {
            Window w = (Window) frame;
            w.setIcon();
        }
    }//GEN-LAST:event_minimizeWindowsActionPerformed

    private void maximizeWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maximizeWindowActionPerformed
        JInternalFrame[] frames = desktopPane.getAllFrames();
        for (JInternalFrame frame : frames) {
            Window w = (Window) frame;
            w.setMaximized();
        }
    }//GEN-LAST:event_maximizeWindowActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Principal().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem about;
    private javax.swing.JButton applyFilterButton;
    private javax.swing.JLabel authors;
    private javax.swing.JPanel authorsPanel;
    private javax.swing.JPanel buttonBottonPanel;
    private javax.swing.JMenuItem closeWindows;
    private javax.swing.JLabel copyright;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenuItem documentation;
    private javax.swing.JMenuItem exitProgram;
    private javax.swing.JMenu file;
    private javax.swing.JMenuItem fileOpen;
    private javax.swing.JMenu help;
    private javax.swing.JMenuItem maximizeWindow;
    private javax.swing.JMenuBar menu;
    private javax.swing.JMenuItem minimizeWindows;
    private javax.swing.JMenuItem newFile;
    private javax.swing.JMenuItem saveFile;
    private javax.swing.JMenu windows;
    // End of variables declaration//GEN-END:variables
}
